stages:
# or just have it as a manual cmd?
# use foreach? param sweep discussion https://github.com/iterative/dvc/pull/8187
  #data:
  #  cmd: dvc pull ../input/buildings/${building}.sqlite                       # TODO: make sure it's the same as map-file above
  #  wdir: work/output

  map:
    cmd: mapping-run-in inv map --db-file ../input/buildings/${building}.sqlite --map-file ../input/mappings/${ontology}/${building}/maps.yaml  --ontology ${ontology}
    wdir: work/output
    deps:
      - ../input/buildings/${building}.sqlite                        # TODO: make sure it's the same as map-file above
      - ../input/mappings/${ontology}/${building}/maps.yaml   # ditto
      - ../../ontologies/${ontology}
    outs:
      - ontology.ttl
      - mapped.ttl
      - log

  upload_data:
    cmd: mapping-run-in inv graphdb.upload-graph --ttl mapped.ttl  --name ${building} 
    wdir: work/output
    deps:
      - mapped.ttl
  upload_ontology:
    cmd: mapping-run-in inv graphdb.upload-graph --ttl ontology.ttl --name ${ontology}
    wdir: work/output
    deps:
      - ontology.ttl

  infer:
    #   python -m pdb -m owlrl._cli
    #                             utf8 is to force utf8 on windows console
    cmd: mapping-run-in python -X utf8 owlrl_patch.py  --input_syntax=turtle --maximal --owlrl=yes --rdfs=yes --serialization=turtle mapped.ttl  ontology.ttl > inferred.ttl
    wdir: work/output
    deps:
      - ontology.ttl
      - mapped.ttl
    outs:
      - inferred.ttl

  
  # validate:
  #   cmd: mapping-run-in python -m  pyshacl --shacl ../../test/test.ttl --ont-graph ontology.ttl -f turtle -o validation.ttl  mapped.ttl
  #   wdir: work/output
  #   deps:
  #     - ontology.ttl
  #     - ../../test/test.ttl
  #   outs:
  #     - validation.ttl



# test here? to actually error out if check?
