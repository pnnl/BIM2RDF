---
prefixes:
  owl:      http://www.w3.org/2002/07/owl#
  rdf:      http://www.w3.org/1999/02/22-rdf-syntax-ns#
  rdfs:     http://www.w3.org/2000/01/rdf-schema#
  skos:     http://www.w3.org/2004/02/skos/core#
  unit:     http://qudt.org/vocab/unit/
  brick:    https://brickschema.org/schema/Brick#
  pnnl:     http://example.org/building/unnamed/   # named in processing

maps:
  - id: luminaire types
    target: |
      pnnl:LuminaireType/{TypeMark}          # keeping id as a 'name'
        rdfs:label      {TypeMark};
        rdf:type        owl:Class;          # ...since it's a class
        rdfs:subClassOf brick:Luminaire;
        skos:definition {Description}@en.
    source:
      # could not do select unique but only unique triples were created
      select
        Id,
        TypeMark,
        Description
      from
        LightingFixtureTypes

  - id: luminaire instances
    target: |
      pnnl:Luminaire/{Id}
        rdfs:label                        {Id};
        a                                 pnnl:LuminaireType/{TypeMark};
        brick:ratedPowerInput             pnnl:Luminaire/{Id}/Power;
        brick:CorrectedColorTemperature   pnnl:Luminaire/{Id}/ColorTemperature;
        brick:LuminousFlux                pnnl:Luminaire/{Id}/LuminousFlux.
      pnnl:Luminaire/{Id}/Power
        brick:value   {Wattage};
        brick:hasUnit unit:W.
      pnnl:Luminaire/{Id}/ColorTemperature
        brick:value   {CorrectedColorTemperature};
        brick:hasUnit unit:K.
      pnnl:Luminaire/{Id}/LuminousFlux
        brick:value   {LuminousFlux};
        brick:hasUnit unit:LM.
    source: |
      select
        LightingFixtures.Id                           as Id,
        LightingFixtureTypes.TypeMark                 as TypeMark,
        LightingFixtureTypes.Wattage                  as Wattage,
        LightingFixtureTypes.InitialColorTemperature  as CorrectedColorTemperature,
        LightingFixtureTypes.LuminousFlux             as LuminousFlux
      from
        LightingFixtures
      inner join
        LightingFixtureTypes
        on
          LightingFixtureTypes.Id=LightingFixtures.TypeId
  


  - id: room instances
    #blank node issues
    #https://github.com/ontop/ontop/issues/372
    #https://github.com/ontop/ontop/issues/303
    # graphdb doesn't like blank nodes
    # https://docs.brickschema.org/metadata/entity-properties.html
    target: |
      pnnl:Room/{Id}
        rdfs:label      {Number};
        a               brick:{RoomType};
        brick:grossArea pnnl:Room/{Id}/Area.
      pnnl:Room/{Id}/Area
        brick:value     {Area}; # no need to convert area value since it's a float in the db
        brick:hasUnit   unit:M2. 
    source: |
      select
        Id,
        Number,
        replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(Name, #ugly
        'Open Office',          'Open_Office'),
        'Private Office',       'Private_Office'),
        'Corridor',             'Hallway'),
        'Conference Room',      'Conference_Room'),
        'Stair',                'Staircase'),
        'Lobby',                'Lobby'),
        'Restroom',             'Restroom'),
        'Mechanical',           'Mechanical_Room'),
        'Lounge',               'Lounge'),
        'Food Prep/Dining',     'Office_Kitchen'),
        'Classroom',            'Library'),
        'Storage/IT',           'Telecom_Room'), # this replacement...
        'Storage',              'Storage_Room')  # ...before this one
        as RoomType,
        Area
      from
        Rooms
  


  - id: floor instances
    target: |
      pnnl:Floor/{Id}
        rdfs:label  {Name};
        a           brick:Floor . 
    source:
      select
        Id,
        Name
      from
        Levels
 
  - id: level-room
    target: |
      pnnl:Floor/{LevelIdentifier}
        brick:hasPart pnnl:Room/{RoomsIdentifier} .
    source:
      select
        Levels.Id as LevelIdentifier,
        Rooms.Id  as RoomsIdentifier
      from Levels
        inner join
          Rooms
        on
          Levels.Id=Rooms.Level

  - id: luminaire-room
    target: pnnl:Luminaire/{LuminaireIdentifier}
              brick:hasLocation pnnl:Room/{RoomIdentifier} .
    source: |
      select
        LightingFixtures.Id as LuminaireIdentifier,
        Rooms.Id            as RoomIdentifier
      from
        LightingFixtures
      inner join
        Rooms
        on
          LightingFixtures.LuminaireRoomParameter=Rooms.Number

  - id: lighting zones
    target:
      pnnl:LightingControlZone/{LightingControlZoneID}
        rdfs:label  {LightingControlZoneID};
        a           brick:Lighting_Zone.
      pnnl:Luminaire/{Id}
        brick:feeds pnnl:LightingControlZone/{LightingControlZoneID}.
    source:
      select
        Id,
        LightingControlZoneID
      from
        LightingFixtures
  
  - id: hvac zones
    target:
      pnnl:HVACZone/{Id}
        rdfs:label  {Name};
        a           brick:HVAC_Zone.
    source: |
      select # really want ' select distinct' here
        HVACZones.Id    as Id,
        HVACZones.Name  as Name
      from
        HVACZones
      inner join
        Rooms
        on
          Rooms.ThermalZonetoRoom=HVACZones.Name

  - id: hvac zones - rooms
    target:
      pnnl:HVACZone/{HVACZoneId}
        brick:hasPart       pnnl:Room/{RoomId}.
    source:
      select
        HVACZones.Id    as  HVACZoneId,
        Rooms.Id        as  RoomId
      from
        HVACZones
      inner join
        Rooms
        on
          HVACZones.Name=Rooms.ThermalZonetoRoom 
